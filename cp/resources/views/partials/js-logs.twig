<script src="/assets/js/tabulator.min.js" defer></script>
<script src="/assets/js/tabler.min.js" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.6.0/jspdf.plugin.autotable.min.js"></script>
<script>
    function fetchAndCacheRegistrars() {
        fetch('/api/records/registrar')
            .then(response => response.json())
            .then(data => {
            console.log(data); 
                // Assuming 'data.records' contains the array of registrars
                const registrars = data.records.reduce((acc, current) => {
                    acc[current.id] = current.name;
                    return acc;
                }, {});
                // Cache the mapping of registrar IDs to names
                localStorage.setItem('registrarsCache', JSON.stringify(registrars));
            })
            .catch(error => console.error("Failed to fetch registrar records:", error));
    }
    
    function getRegistrarNameById(id) {
        const registrarsCache = JSON.parse(localStorage.getItem('registrarsCache') || '{}');
        return registrarsCache[id] || 'Unknown';
    }

    var table;

    document.addEventListener("DOMContentLoaded", function(){
    fetchAndCacheRegistrars();

    table = new Tabulator("#logTable", {
        ajaxURL:"/log-api/records/transaction_identifier", // Set the URL for your JSON data
        ajaxConfig:"GET",
        pagination:"local",
        paginationSize:10,
        ajaxResponse:function(url, params, response){
            return response.records;
        },
        layout:"fitDataFill",
        responsiveLayout: "collapse",
        responsiveLayoutCollapseStartOpen:false,
        resizableColumns:false,
        initialSort:[
            {column:"cldate", dir:"desc"}, // sorting by the "cldate" field in descending order
        ],
        placeholder: "{{ __('No Data') }}",
        columns:[
            {formatter:"responsiveCollapse", width:30, minWidth:30, hozAlign:"center", resizable:false, headerSort:false, responsive:0},
            {title:"{{ __('Date') }}", field:"cldate", headerSort:true, responsive:0},
            {
                title: "{{ __('Registrar') }}", 
                field: "registrar_id", 
                headerSort: true, 
                responsive: 2,
                formatter: function(cell, formatterParams, onRendered) {
                    const registrarId = cell.getValue();
                    const name = getRegistrarNameById(registrarId);
                    return name; // Return the name directly, as it is synchronously obtained from cache
                }
            },
            {title:"{{ __('Command') }}", field:"cmd", headerSort:true, responsive:0},
            {title:"{{ __('Object Type') }}", field:"obj_type", headerSort:true, responsive:0},
            {title:"{{ __('Object') }}", field:"obj_id", headerSort:true, responsive:2},
            {title:"{{ __('Result') }}", field:"code", headerSort:true, responsive:2},
            {title:"{{ __('Message') }}", field:"msg", headerSort:true, responsive:2, download:false},
            {title:"{{ __('clTRID') }}", field:"clTRID", headerSort:true, responsive:2, download:false},
            {title:"{{ __('Milliseconds') }}", field:"svmicrosecond", headerSort:false, download:false, responsive:2},
        ]
    });
    var searchInput = document.getElementById("search-input");
    searchInput.addEventListener("input", function () {
        var term = searchInput.value.toLowerCase();

        if (term) { // Only apply the filter when there's a term to search for
            table.setFilter(function (data) {
                // Check if any of the fields contain the search term
                return (
                    String(data.cldate).toLowerCase().includes(term) ||
                    String(data.registrar_id).toLowerCase().includes(term) ||
                    String(data.cmd).toLowerCase().includes(term) ||
                    String(data.obj_type).toLowerCase().includes(term) ||
                    String(data.obj_id).toLowerCase().includes(term) ||
                    String(data.code).toLowerCase().includes(term) ||
                    String(data.msg).toLowerCase().includes(term) ||
                    String(data.clTRID).toLowerCase().includes(term) ||
                    String(data.svmicrosecond).toLowerCase().includes(term)
                );
            });
        } else {
            table.clearFilter(); // Clear the filter when the search box is emptied
        }
    });
    });
   
    function downloadCSV() {
        table.download("csv", "data.csv");
    }

    function downloadJSON() {
        table.download("json", "data.json");
    }

    function downloadXLSX() {
        table.download("xlsx", "data.xlsx", {sheetName:"My EPP Log"});
    }
    
    function downloadPDF() {
        table.download("pdf", "data.pdf", {
            orientation:"portrait",
            title:"My EPP Log",
            jsPDF:{unit:"mm", format:"a4", orientation:"p"}
        });
    }
</script>