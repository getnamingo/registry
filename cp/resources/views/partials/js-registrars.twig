<script src="/assets/js/tabulator.min.js" defer></script>
<script src="/assets/js/tabler.min.js" defer></script>
<script src="/assets/js/jspdf.umd.min.js" defer></script>
<script src="/assets/js/jspdf.plugin.autotable.min.js" defer></script>
<script>
    var table;

    document.addEventListener("DOMContentLoaded", function(){

    function registrarLinkFormatter(cell){
        var value = cell.getValue();
        return `<a href="/registrar/view/${value}" style="font-weight:bold;">${value}</a>`;
    }
   
    function actionsFormatter(cell, formatterParams, onRendered) {
        return `
            <a class="btn btn-outline-primary btn-icon update-btn" href="/registrar/update/${cell.getRow().getData().clid}" title="{{ __('Manage Registrar') }}"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M7 7h-1a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-1"></path><path d="M20.385 6.585a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3l8.385 -8.415z"></path><path d="M16 5l3 3"></path></svg></a> 
            <a class="btn btn-outline-secondary btn-icon" href="/registrar/view/${cell.getRow().getData().name}" title="{{ __('Registrar Details') }}"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0" /><path d="M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6" /></svg></a> 
            <a class="btn btn-outline-teal btn-icon update-btn" href="/registrar/pricing/${cell.getRow().getData().clid}" title="{{ __('Manage Custom Pricing') }}"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 21v-16a2 2 0 0 1 2 -2h10a2 2 0 0 1 2 2v16l-3 -2l-2 2l-2 -2l-2 2l-2 -2l-3 2" /><path d="M14 8h-2.5a1.5 1.5 0 0 0 0 3h1a1.5 1.5 0 0 1 0 3h-2.5m2 0v1.5m0 -9v1.5" /></svg></a> 
            <a class="btn btn-outline-purple btn-icon update-btn" href="/registrar/impersonate/${cell.getRow().getData().clid}" title="{{ __('Impersonate') }}"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 8v-2a2 2 0 0 1 2 -2h7a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-7a2 2 0 0 1 -2 -2v-2" /><path d="M3 12h13l-3 -3" /><path d="M13 15l3 -3" /></svg></a>
        `;
    }

    function statusFormatter(cell) {
        var statusArray = cell.getValue();
        if (statusArray && Array.isArray(statusArray)) {
            return statusArray.map(item => item.status).join(', ');
        }
        return "";
    }

    var searchTerm = ""; // global variable to hold the search term

    function updateSearchTerm(term) {
        searchTerm = term;
        table.replaceData();
    }

    table = new Tabulator("#registrarTable", {
        pagination: true,
        paginationMode: "remote",
        paginationSize: 10,
        paginationSizeSelector:[10, 25, 50, 100],
        clipboard:true,
        clipboardPasteAction:"replace",
        sortMode: "remote",
        printAsHtml:true,
        ajaxURL:"/api/records/registrar",
        ajaxURLGenerator: function(url, config, params) {
            var queryParts = [];

            // Handle search term
            if (searchTerm) {
                queryParts.push("filter1=name,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter2=iana_id,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter3=email,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter4=accountBalance,cs," + encodeURIComponent(searchTerm));
            }

            // Handle sorting from Tabulator
            if (params.sort && params.sort.length > 0) {
                var sorter = params.sort[0]; // single-column sorting
                var sortField = encodeURIComponent(sorter.field);
                var sortDir = (sorter.dir === "asc" ? "asc" : "desc");
                queryParts.push("order=" + sortField + "," + sortDir);
            } else {
                // fallback default order if no sorters
                queryParts.push("order=name,asc");
            }

            // Include pagination parameters
            if (params.page) {
                queryParts.push("page=" + params.page + "," + params.size);
            }

            return url + "?" + queryParts.join("&");
        },
        ajaxResponse: function(url, params, response) {
            if (response && Array.isArray(response.records) && typeof response.results === 'number') {
                var pageSize = params.size || this.options.paginationSize;
                var lastPage = Math.ceil(response.results / pageSize);
                return {
                    last_page: lastPage,
                    data: response.records,
                };
            } else {
                console.error('Unexpected response format', response);
                return { last_page: 1, data: [] };
            }
        },
        layout:"fitColumns",
        responsiveLayout: "collapse",
        responsiveLayoutCollapseStartOpen:false,
        resizableColumns:false,
        placeholder: "{{ __('No Data') }}",
        columns:[
            {formatter:"responsiveCollapse", width:40, minWidth:40, hozAlign:"center", resizable:false, headerSort:false, responsive:0},
            {title:"{{ __('Name') }}", field:"name", minWidth:120, resizable:false, headerSort:true, formatter: registrarLinkFormatter, responsive:0},
            {title:"IANA ID", field:"iana_id", width:300, resizable:false, headerSort:true, responsive:2},
            {title:"{{ __('Email') }}", field:"email", width:300, resizable:false, headerSort:true, responsive:2},
            {title:"{{ __('Balance') }}", field:"accountBalance", width:300, resizable:false, headerSort:true, responsive:2, formatter:function(cell){
                let data = cell.getRow().getData();
                let currency = data.currency || "$"; // Default to $
                return currency + " " + cell.getValue();
            }},
            {title: "{{ __('Actions') }}", formatter: actionsFormatter, minWidth:190, responsive:0, headerSort: false, download:false, hozAlign: "center", cellClick:function(e, cell){ e.stopPropagation(); }},
        ]
    });
    var searchInput = document.getElementById("search-input");
    let searchTimeout;

    searchInput.addEventListener("input", function () {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        updateSearchTerm(searchInput.value);
      }, 300); // 300ms delay
    });
    });
   
    function downloadCSV() {
        table.download("csv", "registrars.csv");
    }
    
    function downloadPDF() {
        table.download("pdf", "registrars.pdf", {
            orientation:"portrait",
            title:"My Registrars"
        });
    }
</script>