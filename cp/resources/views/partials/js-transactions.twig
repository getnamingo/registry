<script src="/assets/js/tabulator.min.js" defer></script>
<script src="/assets/js/tabler.min.js" defer></script>
<script src="/assets/js/xlsx.full.min.js" defer></script>
<script src="/assets/js/jspdf.umd.min.js" defer></script>
<script src="/assets/js/jspdf.plugin.autotable.min.js" defer></script>
<script>
    var table;
    document.addEventListener("DOMContentLoaded", function(){
    
    var searchTerm = ""; // global variable to hold the search term

    function updateSearchTerm(term) {
        searchTerm = term;
        table.replaceData();
    }

    table = new Tabulator("#transactionTable", {
        pagination: true,
        paginationMode: "remote",
        paginationSize: 10,
        paginationSizeSelector:[10, 25, 50, 100],
        paginationCounter:"rows",
        paginationCounterElement:"#page-count",
        clipboard:true,
        clipboardPasteAction:"replace",
        sortMode: "remote",
        ajaxURL: "/dapi/statements",
        ajaxURLGenerator: function(url, config, params) {
            var queryParts = [];

            // Handle search term
            if (searchTerm) {
                queryParts.push("filter1=registrar_name,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter2=date,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter3=command,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter4=domain_name,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter5=length_in_months,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter6=fromS,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter7=toS,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter8=amount,cs," + encodeURIComponent(searchTerm));
            }

            // Handle sorting from Tabulator
            if (params.sort && params.sort.length > 0) {
                var sorter = params.sort[0]; // single-column sorting
                var sortField = encodeURIComponent(sorter.field);
                var sortDir = (sorter.dir === "asc" ? "asc" : "desc");
                queryParts.push("order=" + sortField + "," + sortDir);
            } else {
                // fallback default order if no sorters
                queryParts.push("order=date,desc");
            }

            // Include pagination parameters
            if (params.page) {
                queryParts.push("page=" + params.page + "," + params.size);
            }

            return url + "?" + queryParts.join("&");
        },
        ajaxResponse: function(url, params, response) {
            if (response && Array.isArray(response.records) && typeof response.results === 'number') {
                var lastPage = Math.ceil(response.results / this.options.paginationSize);
                return {
                    last_page: lastPage, // Calculated total number of pages
                    last_row: response.results, // Total number of rows
                    data: response.records, // Data for the current page
                };
            } else {
                console.error('Unexpected response format', response);
                return { last_page: 1, last_row: 0, data: [] };
            }
        },
        layout:"fitColumns",
        responsiveLayout: "collapse",
        responsiveLayoutCollapseStartOpen:false,
        resizableColumns:false,
        placeholder: "{{ __('No Data') }}",
        columns:[
            {formatter:"responsiveCollapse", width:30, minWidth:30, hozAlign:"center", resizable:false, headerSort:false, responsive:0},
            {title:"{{ __('Registrar') }}", field:"registrar_name", minWidth:150, resizable:false, headerSort:true, responsive:0},
            {title:"{{ __('Date') }}", field:"date", resizable:false, headerSort:true, responsive:2},
            {title:"{{ __('Command') }}", field:"command", resizable:false, headerSort:true, responsive:2},
            {title:"{{ __('Domain') }}", field:"domain_name", resizable:false, headerSort:true, download:false, responsive:2},
            {title:"{{ __('Length') }}", field:"length_in_months", resizable:false, download:false, headerSort:true, responsive:2},
            {title:"{{ __('From') }}", field:"fromS", resizable:false, headerSort:true, download:false, responsive:2},
            {title:"{{ __('To') }}", field:"toS", resizable:false, headerSort:true, download:false, responsive:2},
            {title:"{{ __('Amount') }}", field:"amount", resizable:false, minWidth:150, headerSort:true, responsive:0, formatter:"money",  formatterParams:function(cell){
                return {
                    decimal: ".",
                    thousand: " ",
                    symbol: (cell.getRow().getData().currency || "$") + " ", // Ensures space after currency symbol
                    negativeSign: true
                };
            }},
        ]
    });
    var searchInput = document.getElementById("search-input");
    let searchTimeout;

    searchInput.addEventListener("input", function () {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        updateSearchTerm(searchInput.value);
      }, 300); // 300ms delay
    });
    });
   
    function downloadCSV() {
        table.download("csv", "transactions.csv");
    }

    function downloadJSON() {
        table.download("json", "transactions.json");
    }

    function downloadXLSX() {
        table.download("xlsx", "transactions.xlsx", {sheetName:"My Transactions"});
    }
    
    function downloadPDF() {
        table.download("pdf", "transactions.pdf", {
            orientation:"portrait",
            title:"My Transactions"
        });
    }
</script>