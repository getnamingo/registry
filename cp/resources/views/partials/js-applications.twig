<script src="/assets/js/tabulator.min.js" defer></script>
<script src="/assets/js/sweetalert2.min.js" defer></script>
<script src="/assets/js/tabler.min.js" defer></script>
<script src="/assets/js/xlsx.full.min.js" defer></script>
<script src="/assets/js/jspdf.umd.min.js" defer></script>
<script src="/assets/js/jspdf.plugin.autotable.min.js" defer></script>
<script>
    var table;

    document.addEventListener("DOMContentLoaded", function(){
    function domainLinkFormatter(cell){
        var displayName = cell.getValue();
        var punycodeName = cell.getRow().getData().name_o;
        return `<a href="/application/view/${punycodeName}" style="font-weight:bold;">${displayName}</a>`;
    }

    function actionsFormatter(cell, formatterParams, onRendered) {
        var rowData = cell.getRow().getData();
        var actionButtons = '';

        var isRejected = rowData.application_status.some(statusObj => statusObj.status && statusObj.status.includes('rejected'));
        var isInvalid = rowData.application_status.some(statusObj => statusObj.status && statusObj.status.includes('invalid'));
        var isValidated = rowData.application_status.some(statusObj => statusObj.status && statusObj.status.includes('validated'));
        var isAllocated = rowData.application_status.some(statusObj => statusObj.status && statusObj.status.includes('allocated'));

        if (!isRejected && !isInvalid && !isValidated && !isAllocated) {
            actionButtons += `<a class="btn btn-outline-green btn-icon" href="application/approve/${cell.getRow().getData().name_o}" title="{{ __('Approve Application') }}"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l5 5l10 -10" /></svg></a> `;
            actionButtons += `<a class="btn btn-outline-warning btn-icon" href="application/reject/${cell.getRow().getData().name_o}" title="{{ __('Reject Application') }}"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" /><path d="M5.7 5.7l12.6 12.6" /></svg></a> `;
            actionButtons += `<a class="btn btn-outline-info btn-icon" href="application/update/${cell.getRow().getData().name_o}" title="{{ __('Update Application') }}"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M7 7h-1a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-1"></path><path d="M20.385 6.585a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3l8.385 -8.415z"></path><path d="M16 5l3 3"></path></svg></a> `;
            actionButtons += `<a class="btn btn-outline-danger btn-icon delete-btn" id="delete-btn" href="javascript:void(0);" data-delete-url="application/delete/${cell.getRow().getData().name_o}" title="{{ __('Delete Application') }}"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M4 7h16"></path><path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"></path><path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"></path><path d="M10 12l4 4m0 -4l-4 4"></path></svg></a>`;
        } else if ((isValidated || isAllocated) && !isRejected && !isInvalid) {
            actionButtons += `<strong class="text-success"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" /><path d="M9 12l2 2l4 -4" /></svg> {{ __('Validated') }}</strong>`;
        } else if ((isRejected || isInvalid) && !isValidated && !isAllocated) {
            actionButtons += `<strong class="text-danger"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" /><path d="M5.7 5.7l12.6 12.6" /></svg> {{ __('Invalid') }}</strong>`;
        } else {
            actionButtons += `<strong class="text-info"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" /><path d="M9 12l2 2l4 -4" /></svg> {{ __('Completed') }}</strong>`;
        }

        return actionButtons;
    }

    function phaseFormatter(cell) {
        var statusArray = cell.getValue();
        var rowData = cell.getRow().getData(); // Get the entire row data

        // Function to create a badge
        function createBadge(text, badgeClass) {
            return `<span class="status status-${badgeClass}">${text}</span>`;
        }

        // Check if statusArray is empty or not
        return createBadge(statusArray, 'info');
    }

    function statusFormatter(cell) {
        var statusArray = cell.getValue();
        var rowData = cell.getRow().getData(); // Get the entire row data

        // Function to create status text with appropriate class
        function createStatusText(text, statusClass) {
            return `<span class="status status-${statusClass}">${text}</span>`;
        }

        // Check if statusArray is empty or not
        if (statusArray && Array.isArray(statusArray) && statusArray.length > 0) {
            return statusArray.map(item => {
                let status = item.status.toLowerCase();

                if (status.includes('invalid') || status.includes('rejected')) {
                    return createStatusText(item.status, 'red');
                } else if (status.includes('validated') || status.includes('allocated')) {
                    return createStatusText(item.status, 'green');
                } else if (status.includes('pendingvalidation')) {
                    return createStatusText(item.status, 'orange');  // Color for pending validation
                } else {
                    return createStatusText(item.status, 'gray');    // Default/unknown status
                }
            }).join(' ');
        } else {
            // Handle case when statusArray is empty or undefined
            return `<span class="status status-gray">Unknown</span>`;
        }
    }

    var searchTerm = ""; // global variable to hold the search term

    function updateSearchTerm(term) {
        searchTerm = term;
        table.replaceData();
    }

    table = new Tabulator("#applicationTable", {
        pagination: true,
        paginationMode: "remote",
        paginationSize: 10,
        paginationSizeSelector:[10, 25, 50, 100],
        paginationCounter:"rows",
        paginationCounterElement:"#page-count",
        clipboard:true,
        clipboardPasteAction:"replace",
        sortMode: "remote",
        ajaxURL: "/dapi/applications",
        ajaxURLGenerator: function(url, config, params) {
            var queryParts = [];

            // Handle search term
            if (searchTerm) {
                queryParts.push("filter1=name,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter2=crdate,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter3=phase_type,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter4=registrant_identifier,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter5=name_o,cs," + encodeURIComponent(searchTerm));
            }

            // Handle sorting from Tabulator
            if (params.sort && params.sort.length > 0) {
                var sorter = params.sort[0]; // single-column sorting
                var sortField = encodeURIComponent(sorter.field);
                var sortDir = (sorter.dir === "asc" ? "asc" : "desc");
                queryParts.push("order=" + sortField + "," + sortDir);
            } else {
                // fallback default order if no sorters
                queryParts.push("order=crdate,desc");
            }

            // Include pagination parameters
            if (params.page) {
                queryParts.push("page=" + params.page + "," + params.size);
            }

            return url + "?" + queryParts.join("&");
        },
        ajaxResponse: function(url, params, response) {
            if (response && Array.isArray(response.records) && typeof response.results === 'number') {
                var lastPage = Math.ceil(response.results / this.options.paginationSize);
                return {
                    last_page: lastPage, // Calculated total number of pages
                    last_row: response.results, // Total number of rows
                    data: response.records, // Data for the current page
                };
            } else {
                console.error('Unexpected response format', response);
                return { last_page: 1, last_row: 0, data: [] };
            }
        },
        layout:"fitColumns",
        responsiveLayout: "collapse",
        responsiveLayoutCollapseStartOpen:false,
        resizableColumns:false,
        placeholder: "{{ __('No Data') }}",
        columns:[
            {formatter:"responsiveCollapse", width:30, minWidth:30, hozAlign:"center", resizable:false, headerSort:false, responsive:0},
            {title:"{{ __('Name') }}", field:"name", width:150, resizable:false, headerSort:true, formatter: domainLinkFormatter, responsive:0},
            {title:"{{ __('Applicant') }}", width:200, field:"registrant_identifier", resizable:false, headerSort:true, responsive:2},
            {title:"{{ __('Creation Date') }}", width:250, minWidth:150, field:"crdate", resizable:false, headerSort:true, responsive:2},
            {title:"{{ __('Phase') }}", width:150, minWidth:100, field:"phase_type", formatter: phaseFormatter, resizable:false, headerSort:true, responsive:2},
            {title:"{{ __('Status') }}", width:200, field:"application_status", formatter: statusFormatter, resizable:false, headerSort:true, download:false, responsive:2},
            {title: "{{ __('Actions') }}", formatter: actionsFormatter, resizable:false, headerSort:false, download:false, hozAlign: "center", responsive:0, cellClick: function(e, cell){
                if (e.target.closest('.delete-btn')) {
                    e.preventDefault(); // Prevent the default link behavior
                    Swal.fire({
                      title: "{{ __('Are you sure you want to delete this application?') }}",
                      showCancelButton: true,
                      confirmButtonText: "{{ __('Confirm') }}"
                    }).then((result) => {
                      if (result.isConfirmed) {
                        let deleteUrl = e.target.closest('.delete-btn').getAttribute('data-delete-url');
                        window.location.href = deleteUrl;
                      }
                    });
                }
            }},
        ]
    });
    var searchInput = document.getElementById("search-input");
        let searchTimeout;

        searchInput.addEventListener("input", function () {
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(() => {
            updateSearchTerm(searchInput.value);
          }, 300); // 300ms delay
        });
    });

    function downloadCSV() {
        table.download("csv", "applications.csv");
    }

    function downloadJSON() {
        table.download("json", "applications.json");
    }

    function downloadXLSX() {
        table.download("xlsx", "applications.xlsx", {sheetName:"My Applications"});
    }
    
    function downloadPDF() {
        table.download("pdf", "applications.pdf", {
            orientation:"portrait",
            title:"My Applications"
        });
    }
</script>