{% extends "layouts/auth.twig" %}

{% block title %}Login{% endblock %}

{% block content %}
    <div class="page page-center">
      <div class="container container-tight py-4">
        <div class="text-center mb-4">
          <a href="." class="navbar-brand navbar-brand-autodark"><img src="./static/logo-bw.svg" height="36" alt=""></a>
          {% include 'partials/flash.twig' %}
        </div>
        <div class="card card-md">
          <div class="card-body">
            <h2 class="h2 text-center mb-4">Login to your account</h2>
            <form action="{{route('login')}}" name="login" method="post" autocomplete="off" novalidate>
            {{ csrf.field | raw }}
              <div class="mb-3">
                <label class="form-label">Email address</label>
                <input name="email" type="text" class="form-control" placeholder="your@email.com" autocomplete="off">
              </div>
              <div class="mb-3">
                <label class="form-label">
                  Password
                  <span class="form-label-description">
                    <a href="{{route('forgot.password')}}">I forgot password</a>
                  </span>
                </label>
                <div class="input-group input-group-flat">
                  <input name="password" type="password" class="form-control" placeholder="Your password" autocomplete="off">
                  <span class="input-group-text">
                    <a href="#" class="link-secondary" title="Show password"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="12" cy="12" r="2" /><path d="M22 12c-2.667 4.667 -6 7 -10 7s-7.333 -2.333 -10 -7c2.667 -4.667 6 -7 10 -7s7.333 2.333 10 7" /></svg>
                    </a>
                  </span>
                </div>
              </div>
              <div class="mb-2">
                <label class="form-check">
                  <input name="remember" value="remember" id="remember" type="checkbox" class="form-check-input"/>
                  <span class="form-check-label">Remember me on this device</span>
                </label>
              </div>
              <div class="form-footer">
                <button type="submit" class="btn btn-primary w-100">Sign in</button>
              </div>
            </form>
          </div>
          <div class="hr-text">or</div>
          <div class="card-body">
            <div class="row">
              <div class="col"><button type="button" id="loginWebAuthnButton" class="btn btn-secondary w-100">
                  <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M16.555 3.843l3.602 3.602a2.877 2.877 0 0 1 0 4.069l-2.643 2.643a2.877 2.877 0 0 1 -4.069 0l-.301 -.301l-6.558 6.558a2 2 0 0 1 -1.239 .578l-.175 .008h-1.172a1 1 0 0 1 -.993 -.883l-.007 -.117v-1.172a2 2 0 0 1 .467 -1.284l.119 -.13l.414 -.414h2v-2h2v-2l2.144 -2.144l-.301 -.301a2.877 2.877 0 0 1 0 -4.069l2.643 -2.643a2.877 2.877 0 0 1 4.069 0z" /><path d="M15 9h.01" /></svg>
                  Login with WebAuthn
                </button></div>
            </div>
          </div>
        </div>
      </div>
    </div>
<script src="/assets/js/sweetalert2.min.js" defer></script>
<script>
document.addEventListener('DOMContentLoaded', function() {

    const loginButton = document.getElementById('loginWebAuthnButton');
    const emailInput = document.querySelector('input[name="email"]');
    const passwordInput = document.querySelector('input[name="password"]');

    loginButton.addEventListener('click', async function() {
        try {
            if (!window.fetch || !navigator.credentials || !navigator.credentials.create) {
                throw new Error('Browser not supported.');
            }

            // get check args
            let rep = await window.fetch('/webauthn/login/challenge', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email: emailInput.value }),
                cache: 'no-cache'
            });
            const getArgs = await rep.json();

            // error handling
            if (getArgs.success === false) {
                throw new Error(getArgs.msg);
            }

            // replace binary base64 data with ArrayBuffer. a other way to do this
            // is the reviver function of JSON.parse()
            recursiveBase64StrToArrayBuffer(getArgs);

            // check credentials with hardware
            const cred = await navigator.credentials.get(getArgs);

            // create object for transmission to server
            const authenticatorAttestationResponse = {
                id: cred.rawId ? arrayBufferToBase64(cred.rawId) : null,
                clientDataJSON: cred.response.clientDataJSON  ? arrayBufferToBase64(cred.response.clientDataJSON) : null,
                authenticatorData: cred.response.authenticatorData ? arrayBufferToBase64(cred.response.authenticatorData) : null,
                signature: cred.response.signature ? arrayBufferToBase64(cred.response.signature) : null,
                userHandle: cred.response.userHandle ? arrayBufferToBase64(cred.response.userHandle) : null
            };

            // send to server
            rep = await window.fetch('/webauthn/login/verify', {
                method:'POST',
                body: JSON.stringify(authenticatorAttestationResponse),
                cache:'no-cache'
            });
            
            // Check the Content-Type of the response
            const contentType = rep.headers.get('Content-Type');

            if (contentType && contentType.includes('application/json')) {
                // If the response is JSON, proceed with parsing
                const authenticatorAttestationServerResponse = await rep.json();

                // check server response
                if (authenticatorAttestationServerResponse.success) {
                    Swal.fire({
                      title: 'WebAuthn Login',
                      text: authenticatorAttestationServerResponse.msg || 'Login success',
                      icon: "success"
                    });
                } else {
                    Swal.fire({
                      title: 'WebAuthn Login',
                      text: authenticatorAttestationServerResponse.msg,
                      icon: "error"
                    });
                }
            } else if (contentType && (contentType.includes('text/html') || contentType.includes('application/xhtml+xml'))) {
                // If the response is HTML, redirect to /dashboard
                window.location.href = '/dashboard';
            } else {
                // Handle other content types or unexpected responses
                console.error('Unexpected response type:', contentType);
            }
        } catch (err) {
            Swal.fire({
              title: 'WebAuthn Login',
              text: err.message || 'Unknown error occured',
              icon: "error"
            });
        }

    });
    
    /**
     * convert RFC 1342-like base64 strings to array buffer
     * @param {mixed} obj
     * @returns {undefined}
     */
    function recursiveBase64StrToArrayBuffer(obj) {
        let prefix = '=?BINARY?B?';
        let suffix = '?=';
        if (typeof obj === 'object') {
            for (let key in obj) {
                if (typeof obj[key] === 'string') {
                    let str = obj[key];
                    if (str.substring(0, prefix.length) === prefix && str.substring(str.length - suffix.length) === suffix) {
                        str = str.substring(prefix.length, str.length - suffix.length);

                        let binary_string = window.atob(str);
                        let len = binary_string.length;
                        let bytes = new Uint8Array(len);
                        for (let i = 0; i < len; i++)        {
                            bytes[i] = binary_string.charCodeAt(i);
                        }
                        obj[key] = bytes.buffer;
                    }
                } else {
                    recursiveBase64StrToArrayBuffer(obj[key]);
                }
            }
        }
    }

    /**
     * Convert a ArrayBuffer to Base64
     * @param {ArrayBuffer} buffer
     * @returns {String}
     */
    function arrayBufferToBase64(buffer) {
        let binary = '';
        let bytes = new Uint8Array(buffer);
        let len = bytes.byteLength;
        for (let i = 0; i < len; i++) {
            binary += String.fromCharCode( bytes[ i ] );
        }
        return window.btoa(binary);
    }

    const togglePasswordBtn = document.querySelector('.input-group-text a');

    togglePasswordBtn.addEventListener('click', function() {
      const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
      passwordInput.setAttribute('type', type);
      
      const svg = togglePasswordBtn.querySelector('svg');
      const title = togglePasswordBtn.getAttribute('title');
      
      if (type === 'text') {
        svg.innerHTML = '<path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M3 3l18 18"></path><path d="M10.584 10.587a2 2 0 0 0 2.828 2.83"></path><path d="M9.363 5.365a9.466 9.466 0 0 1 2.637 -.365c4 0 7.333 2.333 10 7c-.778 1.361 -1.612 2.524 -2.503 3.488m-2.14 1.861c-1.631 1.1 -3.415 1.651 -5.357 1.651c-4 0 -7.333 -2.333 -10 -7c1.369 -2.395 2.913 -4.175 4.632 -5.341"></path>';
        togglePasswordBtn.setAttribute('title', 'Hide password');
      } else {
        svg.innerHTML = '<path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M12 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0"></path><path d="M22 12c-2.667 4.667 -6 7 -10 7s-7.333 -2.333 -10 -7c2.667 -4.667 6 -7 10 -7s7.333 2.333 10 7"></path>';
        togglePasswordBtn.setAttribute('title', 'Show password');
      }
    });

});
</script>
{% endblock %}